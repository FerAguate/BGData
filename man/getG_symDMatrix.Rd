% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{getG_symDMatrix}
\alias{getG_symDMatrix}
\title{Computes a Genomic Relationship Matrix G=xx' without Ever Loading G in RAM
by Creating a symDMatrix.}
\usage{
getG_symDMatrix(X, nBlocks = 5, blockSize = NULL, centers = NULL,
  scales = NULL, centerCol = TRUE, scaleCol = TRUE, scaleG = TRUE,
  folderOut = paste0("symDMatrix_", randomString()), vmode = "double",
  i = seq_len(nrow(X)), j = seq_len(ncol(X)), nTasks = nCores,
  nCores = getOption("mc.cores", 2L), verbose = TRUE)
}
\arguments{
\item{X}{A matrix-like object, typically \code{@geno} of a \linkS4class{BGData}
object.}

\item{nBlocks}{The number of blocks.}

\item{blockSize}{The number of columns of a block (if NULL inferred from block).}

\item{centers}{Precomputed centers.}

\item{scales}{Precomputed scales.}

\item{centerCol}{TRUE/FALSE whether columns must be centered before
computing xx'.}

\item{scaleCol}{TRUE/FALSE whether columns must be scaled before computing
xx'.}

\item{scaleG}{TRUE/FALSE whether xx' must be scaled.}

\item{folderOut}{The path to the folder where to save the
\link[symDMatrix:symDMatrix-class]{symDMatrix::symDMatrix} object. Defaults to a random string prefixed
with "symDMatrix_".}

\item{vmode}{vmode of \code{ff} objects.}

\item{i}{Indicates which rows of \code{X} should be used. Can be integer,
boolean, or character. By default, all rows are used.}

\item{j}{Indicates which columns of \code{X} should be used. Can be integer,
boolean, or character. By default, all columns are used.}

\item{nTasks}{The number of tasks the problem should be broken into to be
distributed among \code{nCores} cores. Defaults to \code{nCores}.}

\item{nCores}{The number of cores (passed to \code{\link[parallel:mclapply]{parallel::mclapply()}}).
Defaults to the number of cores as detected by \code{\link[parallel:detectCores]{parallel::detectCores()}}.}

\item{verbose}{Whether progress updates will be posted. Defaults to \code{TRUE}.}
}
\value{
A positive semi-definite symmetric numeric matrix.
}
\description{
Offers options for centering and scaling the columns of x before computing
xx'.
}
\section{Multi-level parallelism}{

Functions with the \code{nCores}, \code{nTasks}, \code{i}, and \code{j} parameters provide
capabilities for both parallel and distributed computing.

For parallel computing, \code{nCores} determines the number of cores the code is
run on, and \code{nTasks} determines into how many tasks the problem is divided
into. \code{nTasks} should be at least as high as \code{nCores} to keep all cores
busy. Memory usage can be an issue for higher values of \code{nCores} and
\code{nTasks} as R is not particularly memory-efficient. As a rule of thumb, at
least around \code{object_size(X) + (nCores * (object_size(X) / nTasks)) + object_size(result)} MB of total memory will be needed for operations on
memory-mapped matrices, not including potential copies of your data that
might be created (for example \code{\link[stats:lsfit]{stats::lsfit()}} runs \code{cbind(1, X)}). \code{i} and
\code{j} can be used to include or exclude certain rows or columns. Internally,
the \code{\link[parallel:mclapply]{parallel::mclapply()}} function is used and therefore parallel computing
will not work on Windows machines.

For distributed computing, \code{i} and \code{j} determine the subset of the input
matrix that the code runs on. In an HPC environment, this can be used not
just to include or exclude certain rows or columns, but also to partition
the task among many nodes rather than cores. Scheduler-specific code and
code to aggregate the results need to be written by the user. It is
recommended to set \code{nCores} and \code{nTasks} to \code{1} as nodes are often cheaper
than cores.
}

