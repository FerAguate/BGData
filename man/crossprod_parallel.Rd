% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{crossprod_parallel}
\alias{crossprod_parallel}
\alias{tcrossprod_parallel}
\title{Computes crossprod (x'x or x'y) or tcrossprod (xx' or xy') in Parallel.}
\usage{
crossprod_parallel(x, y = NULL, nTasks = nCores,
  nCores = parallel::detectCores())

tcrossprod_parallel(x, y = NULL, nTasks = nCores,
  nCores = parallel::detectCores())
}
\arguments{
\item{x}{A matrix-like object, typically \code{@geno} of a \linkS4class{BGData}
object.}

\item{y}{vector or matrix-like object. \code{NULL} by default.}

\item{nTasks}{The number of tasks the problem should be broken into to be
distributed among \code{nCores} cores. Defaults to \code{nCores}.}

\item{nCores}{The number of cores (passed to \code{\link[parallel:mclapply]{parallel::mclapply()}}).
Defaults to the number of cores as detected by \code{\link[parallel:detectCores]{parallel::detectCores()}}.}
}
\value{
x'x or x'y (\code{crossprod_parallel}), or xx' or xy'
(\code{tcrossprod_parallel}), depending on whether \code{y} is provided.
}
\description{
Similar to \code{\link[base:crossprod]{base::crossprod()}} and \code{\link[base:tcrossprod]{base::tcrossprod()}}, but designed to
carry out operations in parallel. The input matrix \code{x} (and \code{y} if not
\code{NULL}) is broken into \code{nTasks} chunks and passed to \code{\link[parallel:mclapply]{parallel::mclapply()}}
which performs \code{\link[base:crossprod]{base::crossprod()}} or \code{\link[base:tcrossprod]{base::tcrossprod()}} on each chunk.
The results are added up and returned.
}
\details{
If \code{nTasks} is \code{1}, \code{\link[base:crossprod]{base::crossprod()}} or \code{\link[base:tcrossprod]{base::tcrossprod()}} will be
called directly without parallelism.
}
\seealso{
\code{\link[=getG]{getG()}} to compute a genomic relationship matrix.
}
